// <auto-generated />
using System;
using HW.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HW.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250421113257_ProfessionNullableMigration")]
    partial class ProfessionNullableMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HW.Core.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("HW.Core.Entities.CandidateOrder", b =>
                {
                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.HasKey("CandidateId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("CandidateOrder");
                });

            modelBuilder.Entity("HW.Core.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("HW.Core.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("ExecutorId")
                        .HasColumnType("uuid");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("ProfessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HW.Core.Entities.Profession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RussianName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Proffesions");
                });

            modelBuilder.Entity("HW.Core.Entities.Company", b =>
                {
                    b.HasBaseType("HW.Core.Entities.Account");

                    b.Property<Guid?>("AvatarImageId")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasIndex("AvatarImageId");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("HW.Core.Entities.User", b =>
                {
                    b.HasBaseType("HW.Core.Entities.Account");

                    b.Property<Guid?>("AvatarImageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasIndex("AvatarImageId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("HW.Core.Entities.Account", b =>
                {
                    b.OwnsOne("HW.Core.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.OwnsOne("HW.Core.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("HW.Core.Entities.CandidateOrder", b =>
                {
                    b.HasOne("HW.Core.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HW.Core.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HW.Core.Entities.Image", b =>
                {
                    b.HasOne("HW.Core.Entities.Order", null)
                        .WithMany("Images")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("HW.Core.Entities.Order", b =>
                {
                    b.HasOne("HW.Core.Entities.User", "Creator")
                        .WithMany("OrdersAsCreator")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HW.Core.Entities.Account", "Executor")
                        .WithMany("OrdersAsExecutor")
                        .HasForeignKey("ExecutorId");

                    b.HasOne("HW.Core.Entities.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId");

                    b.Navigation("Creator");

                    b.Navigation("Executor");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("HW.Core.Entities.Company", b =>
                {
                    b.HasOne("HW.Core.Entities.Image", "AvatarImage")
                        .WithMany()
                        .HasForeignKey("AvatarImageId");

                    b.HasOne("HW.Core.Entities.Account", null)
                        .WithOne()
                        .HasForeignKey("HW.Core.Entities.Company", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvatarImage");
                });

            modelBuilder.Entity("HW.Core.Entities.User", b =>
                {
                    b.HasOne("HW.Core.Entities.Image", "AvatarImage")
                        .WithMany()
                        .HasForeignKey("AvatarImageId");

                    b.HasOne("HW.Core.Entities.Account", null)
                        .WithOne()
                        .HasForeignKey("HW.Core.Entities.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HW.Core.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FirstName");

                            b1.Property<string>("Patronymic")
                                .HasColumnType("text")
                                .HasColumnName("Patronymic");

                            b1.Property<string>("SecondName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("SecondName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("AvatarImage");

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("HW.Core.Entities.Account", b =>
                {
                    b.Navigation("OrdersAsExecutor");
                });

            modelBuilder.Entity("HW.Core.Entities.Order", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("HW.Core.Entities.User", b =>
                {
                    b.Navigation("OrdersAsCreator");
                });
#pragma warning restore 612, 618
        }
    }
}
